{-# LANGUAGE GADTs #-}
{-# LANGUAGE EmptyCase #-}

module Pi.Skel where

-- Haskell module generated by the BNF converter

import qualified Pi.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transTree :: Pi.Abs.Tree c -> Result
transTree t = case t of
  Pi.Abs.E_Var ident -> failure t
  Pi.Abs.E_Abs ident expr -> failure t
  Pi.Abs.E_App expr0 expr1 -> failure t
  Pi.Abs.E_Pi ident expr0 expr1 -> failure t
  Pi.Abs.E_Type  -> failure t
  Pi.Abs.E_Anno expr0 expr1 -> failure t
  Pi.Abs.Ident str -> failure t

transExpr :: Pi.Abs.Expr -> Result
transExpr t = case t of
  Pi.Abs.E_Var ident -> failure t
  Pi.Abs.E_Abs ident expr -> failure t
  Pi.Abs.E_App expr0 expr1 -> failure t
  Pi.Abs.E_Pi ident expr0 expr1 -> failure t
  Pi.Abs.E_Type  -> failure t
  Pi.Abs.E_Anno expr0 expr1 -> failure t

transIdent :: Pi.Abs.Ident -> Result
transIdent t = case t of
  Pi.Abs.Ident str -> failure t

