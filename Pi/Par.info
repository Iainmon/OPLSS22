-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from Pi/Par.y
-----------------------------------------------------------------------------

state 9 contains 1 shift/reduce conflicts.
state 11 contains 4 shift/reduce conflicts.
state 16 contains 4 shift/reduce conflicts.
state 22 contains 4 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExpr -> Expr                               (0)
	Ident -> L_Ident                                   (1)
	Expr -> '(' Expr ')'                               (2)
	Expr -> Ident                                      (3)
	Expr -> '\\' Ident '.' Expr                        (4)
	Expr -> Expr Expr                                  (5)
	Expr -> '(' Ident ':' Expr ')' '->' Expr           (6)
	Expr -> 'Type'                                     (7)
	Expr -> '(' Expr ':' Expr ')'                      (8)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'->'           { PT _ (TS _ 3) }
	'.'            { PT _ (TS _ 4) }
	':'            { PT _ (TS _ 5) }
	'Type'         { PT _ (TS _ 6) }
	'\\'           { PT _ (TS _ 7) }
	L_Ident        { PT _ (TV $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExpr    rule  0
	Ident           rule  1
	Expr            rules 2, 3, 4, 5, 6, 7, 8

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 5
	'Type'         shift, and enter state 6
	'\\'           shift, and enter state 7
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 4

State 1


	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'('            reduce using rule 1
	')'            reduce using rule 1
	'.'            reduce using rule 1
	':'            reduce using rule 1
	'Type'         reduce using rule 1
	'\\'           reduce using rule 1
	L_Ident        reduce using rule 1
	%eof           reduce using rule 1


State 3

	Expr -> Ident .                                     (rule 3)

	'('            reduce using rule 3
	')'            reduce using rule 3
	':'            reduce using rule 3
	'Type'         reduce using rule 3
	'\\'           reduce using rule 3
	L_Ident        reduce using rule 3
	%eof           reduce using rule 3


State 4

	%start_pExpr -> Expr .                              (rule 0)
	Expr -> Expr . Expr                                 (rule 5)

	'('            shift, and enter state 5
	'Type'         shift, and enter state 6
	'\\'           shift, and enter state 7
	L_Ident        shift, and enter state 2
	%eof           accept

	Ident          goto state 3
	Expr           goto state 11

State 5

	Expr -> '(' . Expr ')'                              (rule 2)
	Expr -> '(' . Ident ':' Expr ')' '->' Expr          (rule 6)
	Expr -> '(' . Expr ':' Expr ')'                     (rule 8)

	'('            shift, and enter state 5
	'Type'         shift, and enter state 6
	'\\'           shift, and enter state 7
	L_Ident        shift, and enter state 2

	Ident          goto state 9
	Expr           goto state 10

State 6

	Expr -> 'Type' .                                    (rule 7)

	'('            reduce using rule 7
	')'            reduce using rule 7
	':'            reduce using rule 7
	'Type'         reduce using rule 7
	'\\'           reduce using rule 7
	L_Ident        reduce using rule 7
	%eof           reduce using rule 7


State 7

	Expr -> '\\' . Ident '.' Expr                       (rule 4)

	L_Ident        shift, and enter state 2

	Ident          goto state 8

State 8

	Expr -> '\\' Ident . '.' Expr                       (rule 4)

	'.'            shift, and enter state 15


State 9

	Expr -> Ident .                                     (rule 3)
	Expr -> '(' Ident . ':' Expr ')' '->' Expr          (rule 6)

	'('            reduce using rule 3
	')'            reduce using rule 3
	':'            shift, and enter state 14
			(reduce using rule 3)

	'Type'         reduce using rule 3
	'\\'           reduce using rule 3
	L_Ident        reduce using rule 3


State 10

	Expr -> '(' Expr . ')'                              (rule 2)
	Expr -> Expr . Expr                                 (rule 5)
	Expr -> '(' Expr . ':' Expr ')'                     (rule 8)

	'('            shift, and enter state 5
	')'            shift, and enter state 12
	':'            shift, and enter state 13
	'Type'         shift, and enter state 6
	'\\'           shift, and enter state 7
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 11

State 11

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr Expr .                                 (rule 5)

	'('            shift, and enter state 5
			(reduce using rule 5)

	')'            reduce using rule 5
	':'            reduce using rule 5
	'Type'         shift, and enter state 6
			(reduce using rule 5)

	'\\'           shift, and enter state 7
			(reduce using rule 5)

	L_Ident        shift, and enter state 2
			(reduce using rule 5)

	%eof           reduce using rule 5

	Ident          goto state 3
	Expr           goto state 11

State 12

	Expr -> '(' Expr ')' .                              (rule 2)

	'('            reduce using rule 2
	')'            reduce using rule 2
	':'            reduce using rule 2
	'Type'         reduce using rule 2
	'\\'           reduce using rule 2
	L_Ident        reduce using rule 2
	%eof           reduce using rule 2


State 13

	Expr -> '(' Expr ':' . Expr ')'                     (rule 8)

	'('            shift, and enter state 5
	'Type'         shift, and enter state 6
	'\\'           shift, and enter state 7
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 18

State 14

	Expr -> '(' Ident ':' . Expr ')' '->' Expr          (rule 6)

	'('            shift, and enter state 5
	'Type'         shift, and enter state 6
	'\\'           shift, and enter state 7
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 17

State 15

	Expr -> '\\' Ident '.' . Expr                       (rule 4)

	'('            shift, and enter state 5
	'Type'         shift, and enter state 6
	'\\'           shift, and enter state 7
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 16

State 16

	Expr -> '\\' Ident '.' Expr .                       (rule 4)
	Expr -> Expr . Expr                                 (rule 5)

	'('            shift, and enter state 5
			(reduce using rule 4)

	')'            reduce using rule 4
	':'            reduce using rule 4
	'Type'         shift, and enter state 6
			(reduce using rule 4)

	'\\'           shift, and enter state 7
			(reduce using rule 4)

	L_Ident        shift, and enter state 2
			(reduce using rule 4)

	%eof           reduce using rule 4

	Ident          goto state 3
	Expr           goto state 11

State 17

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> '(' Ident ':' Expr . ')' '->' Expr          (rule 6)

	'('            shift, and enter state 5
	')'            shift, and enter state 20
	'Type'         shift, and enter state 6
	'\\'           shift, and enter state 7
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 11

State 18

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> '(' Expr ':' Expr . ')'                     (rule 8)

	'('            shift, and enter state 5
	')'            shift, and enter state 19
	'Type'         shift, and enter state 6
	'\\'           shift, and enter state 7
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 11

State 19

	Expr -> '(' Expr ':' Expr ')' .                     (rule 8)

	'('            reduce using rule 8
	')'            reduce using rule 8
	':'            reduce using rule 8
	'Type'         reduce using rule 8
	'\\'           reduce using rule 8
	L_Ident        reduce using rule 8
	%eof           reduce using rule 8


State 20

	Expr -> '(' Ident ':' Expr ')' . '->' Expr          (rule 6)

	'->'           shift, and enter state 21


State 21

	Expr -> '(' Ident ':' Expr ')' '->' . Expr          (rule 6)

	'('            shift, and enter state 5
	'Type'         shift, and enter state 6
	'\\'           shift, and enter state 7
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 22

State 22

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> '(' Ident ':' Expr ')' '->' Expr .          (rule 6)

	'('            shift, and enter state 5
			(reduce using rule 6)

	')'            reduce using rule 6
	':'            reduce using rule 6
	'Type'         shift, and enter state 6
			(reduce using rule 6)

	'\\'           shift, and enter state 7
			(reduce using rule 6)

	L_Ident        shift, and enter state 2
			(reduce using rule 6)

	%eof           reduce using rule 6

	Ident          goto state 3
	Expr           goto state 11

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 9
Number of terminals: 8
Number of non-terminals: 3
Number of states: 23
