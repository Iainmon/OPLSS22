-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Pi.Par where
import qualified Pi.Abs
import Pi.Lex
}

%name pExpr Expr
-- no lexer declaration
%monad { Either String } { (>>=) } { return }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '->' { PT _ (TS _ 3) }
  '.' { PT _ (TS _ 4) }
  ':' { PT _ (TS _ 5) }
  'Type' { PT _ (TS _ 6) }
  '\\' { PT _ (TS _ 7) }
  L_Ident  { PT _ (TV $$) }

%%

Ident :: { Pi.Abs.Ident}
Ident  : L_Ident { Pi.Abs.Ident $1 }

Expr :: { Pi.Abs.Expr }
Expr : '(' Expr ')' { $2 }
     | Ident { Pi.Abs.E_Var $1 }
     | '\\' Ident '.' Expr { Pi.Abs.E_Abs $2 $4 }
     | Expr Expr { Pi.Abs.E_App $1 $2 }
     | '(' Ident ':' Expr ')' '->' Expr { Pi.Abs.E_Pi $2 $4 $7 }
     | 'Type' { Pi.Abs.E_Type }
     | '(' Expr ':' Expr ')' { Pi.Abs.E_Anno $2 $4 }
{

happyError :: [Token] -> Either String a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer = tokens
}

